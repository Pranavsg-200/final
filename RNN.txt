import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import r2_score

# Load dataset
data = pd.read_csv("Google_Stock_Price_Train.csv")

# Preprocess data
scaler = MinMaxScaler()
data[['Open', 'High', 'Low', 'Close', 'Volume']] = scaler.fit_transform(data[['Open', 'High', 'Low', 'Close', 'Volume']])

# Split data into input-output pairs
def split_seq_multivariate(sequence, n_past, n_future):
    X, y = [], []
    for i in range(len(sequence)-n_past-n_future+1):
        X.append(sequence[i:i+n_past, :])
        y.append(sequence[i+n_past:i+n_past+n_future, -2])
    return np.array(X), np.array(y)

n_steps = 60
n_future = 1
X, y = split_seq_multivariate(data.values, n_steps, n_future)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Define RNN model
model = Sequential()
model.add(LSTM(100, input_shape=(n_steps, 5)))
model.add(Dense(1))

# Compile model
model.compile(optimizer='adam', loss='mse')

# Train model
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)

# Evaluate model
predicted_values = model.predict(X_test)
r_squared = r2_score(y_test, predicted_values)
print("R squared:", r_squared)
